	
	保存jobDetail和trigger源码分析 ：https://blog.csdn.net/u010648555/article/details/53643043 
	Scheduler.start任务启动源码分析：https://blog.csdn.net/u010648555/article/details/53520314
	
	
一、保存定时任务和触发器 
	StdScheduler.class  scheduleJob -->  QuartzSchduler.class scheduleJob --> JobStoreSupport.class storeJobAndTrigger -->  storeJob(conn, newJob, false);
																														 	storeTrigger(conn, newTrigger, newJob, false,Constants.STATE_WAITING, false, false);
	StdScheduler.class  scheduleJob(JobDetail jobDetail, Trigger trigger)  // 保存JobDetail 和 Trigger
		
	QuartzSchduler.class 
		
		  public Date scheduleJob(JobDetail jobDetail,Trigger trigger) throws SchedulerException {
				validateState();//验证调度器是否关闭，关闭抛出异常

				//检查 jobDetail和trigger 
				if (jobDetail == null) {
					throw new SchedulerException("JobDetail cannot be null");
				}

				if (trigger == null) {
					throw new SchedulerException("Trigger cannot be null");
				}

				if (jobDetail.getKey() == null) {
					throw new SchedulerException("Job's key cannot be null");
				}

				if (jobDetail.getJobClass() == null) {
					throw new SchedulerException("Job's class cannot be null");
				}

				OperableTrigger trig = (OperableTrigger)trigger;

				//getJobKey 获取 getJobName(), getJobGroup() 
				if (trigger.getJobKey() == null) {
					trig.setJobKey(jobDetail.getKey());
				} else if (!trigger.getJobKey().equals(jobDetail.getKey())) {
					throw new SchedulerException(
						"Trigger does not reference given job!");
				}
				//验证trigger
				trig.validate();

				Calendar cal = null;
				if (trigger.getCalendarName() != null) {
					cal = resources.getJobStore().retrieveCalendar(trigger.getCalendarName());//检索Calendar
				   "SELECT * FROM {0}CALENDARS WHERE SCHED_NAME = {1} AND CALENDAR_NAME = ?"
				}
				//在触发器首次添加到调度程序时由调度程序调用，以便让触发器基于任何关联的日历计算
				//其第一次触发时间。调用此方法后，getNextFireTime（）应返回有效的答案。
				Date ft = trig.computeFirstFireTime(cal);

				if (ft == null) {
					throw new SchedulerException(
							"Based on configured schedule, the given trigger '" + trigger.getKey() + "' will never fire.");
				}

				//存储给定的org.quartz.JobDetail和org.quartz.Trigger。
				resources.getJobStore().storeJobAndTrigger(jobDetail, trig);
				notifySchedulerListenersJobAdded(jobDetail);
				notifySchedulerThread(trigger.getNextFireTime().getTime());
				notifySchedulerListenersSchduled(trigger);

				return ft;
		}

	
二、启动任务 

	StdScheduler.class start --> QuartzScheduler.class start --> JobStoreSupport.class schedulerStarted --> 
	
	public void start() throws SchedulerException {

        if (shuttingDown|| closed) {
            throw new SchedulerException(
                    "The Scheduler cannot be restarted after shutdown() has been called.");
        }

        // QTZ-212 : calling new schedulerStarting() method on the listeners
        // right after entering start()
        notifySchedulerListenersStarting();

        if (initialStart == null) {//初始化标识为null，进行初始化操作
            initialStart = new Date();
            this.resources.getJobStore().schedulerStarted();//1.1 主要分析的地方      
            startPlugins();
        } else {

            resources.getJobStore().schedulerResumed();//1.2如果已经初始化过，则恢复jobStore
        }

        schedThread.togglePause(false);//3.1 唤醒所有等待的线程

        getLog().info(
                "Scheduler " + resources.getUniqueIdentifier() + " started.");

        notifySchedulerListenersStarted();
    }

	public void schedulerStarted() throws SchedulerException {
        //是集群
        if (isClustered()) {
            clusterManagementThread = new ClusterManager();
            if(initializersLoader != null)
                clusterManagementThread.setContextClassLoader(initializersLoader);
            clusterManagementThread.initialize();
        } else {//不是集群
            try {
                recoverJobs();//2.1 恢复job 
            } catch (SchedulerException se) {
                throw new SchedulerConfigException(
                        "Failure occured during job recovery.", se);
            }
        }

        misfireHandler = new MisfireHandler();
        if(initializersLoader != null)
            misfireHandler.setContextClassLoader(initializersLoader);
        misfireHandler.initialize();//2.2 获取ThreadExecutor 线程管理
        schedulerRunning = true;

        getLog().debug("JobStore background threads started (as scheduler was started).");
    }   

	//启动的时候 有一个恢复机制：
    //recoverJobs -----  将恢复任何失败或misfire的作业，并根据需要清理数据存储。
     protected void recoverJobs() throws JobPersistenceException {
        executeInNonManagedTXLock(
            LOCK_TRIGGER_ACCESS,
            new VoidTransactionCallback() {
                public void executeVoid(Connection conn) throws JobPersistenceException {
                    recoverJobs(conn);//恢复job
                }
            }, null);
    }

    protected void recoverJobs(Connection conn) throws JobPersistenceException {
        try {
            （1）//更新不一致的作业状态     先修改状态，将 ACQUIRED 和 BLOCKED ---> WAITING
            int rows = getDelegate().updateTriggerStatesFromOtherStates(conn,
                    STATE_WAITING, STATE_ACQUIRED, STATE_BLOCKED);

            rows += getDelegate().updateTriggerStatesFromOtherStates(conn,
                        STATE_PAUSED, STATE_PAUSED_BLOCKED, STATE_PAUSED_BLOCKED);

            //----更新sql---      
            //"UPDATE {0}TRIGGERS SET TRIGGER_STATE = ? WHERE SCHED_NAME = {1} AND (TRIGGER_STATE = ? OR TRIGGER_STATE = ?)"

            getLog().info(
                    "Freed " + rows
                            + " triggers from 'acquired' / 'blocked' state.");

            // clean up misfired jobs
            //2.1.1 清理misfire的jobs
            recoverMisfiredJobs(conn, true);

            // recover jobs marked for recovery that were not fully executed
            //2.1.2 恢复未完全执行的标记为恢复的作业 --查询 qrtz_fire_trigger
            List<OperableTrigger> recoveringJobTriggers = getDelegate()
                    .selectTriggersForRecoveringJobs(conn);
            getLog()
                    .info(
                            "Recovering "
                                    + recoveringJobTriggers.size()
                                    + " jobs that were in-progress at the time of the last shut-down.");

            for (OperableTrigger recoveringJobTrigger: recoveringJobTriggers) {
                if (jobExists(conn, recoveringJobTrigger.getJobKey())) {
                    recoveringJobTrigger.computeFirstFireTime(null);
                    storeTrigger(conn, recoveringJobTrigger, null, false,
                            STATE_WAITING, false, true);
                }
            }
            getLog().info("Recovery complete.");

            // remove lingering 'complete' triggers...
            //2.1.3 移除state == complete 
            List<TriggerKey> cts = getDelegate().selectTriggersInState(conn, STATE_COMPLETE);
            for(TriggerKey ct: cts) {
                removeTrigger(conn, ct);
            }
            getLog().info(
                "Removed " + cts.size() + " 'complete' triggers.");

            // clean up any fired trigger entries
            //2.1.4 清理任何已触发的触发器条目
            int n = getDelegate().deleteFiredTriggers(conn);
            getLog().info("Removed " + n + " stale fired job entries.");
        } catch (JobPersistenceException e) {
            throw e;
        } catch (Exception e) {
            throw new JobPersistenceException("Couldn't recover jobs: "
                    + e.getMessage(), e);
        }
    }

	